//
//  GRAPHIC_RENDERER_TECHNIQUE_DEFERRED_SHADING.hpp
//  GAME-ENGINE
//
//  Created by Christophe Bernard on 5/06/18.
//  Copyright Â© 2018 Christophe Bernard. All rights reserved.
//

#ifndef GRAPHIC_RENDERER_TECHNIQUE_DEFERRED_SHADING_hpp
#define GRAPHIC_RENDERER_TECHNIQUE_DEFERRED_SHADING_hpp

#include "GRAPHIC_RENDERER_TECHNIQUE.h"
#include "GRAPHIC_RENDERER_TECHNIQUE_DEFERRED_SHADING_TEXTURE_TYPE.h"
#include "GRAPHIC_RENDER_TARGET.h"
#include "GRAPHIC_MATERIAL.h"
#include "GRAPHIC_OBJECT_SHAPE_PLAN.h"
#include "GRAPHIC_OBJECT_SHAPE_SPHERE.h"
#include "GRAPHIC_TEXTURE_BLOCK.h"
#include "GRAPHIC_SHADER_EFFECT.h"
#include "GRAPHIC_SHADER_EFFECT_DEFERRED.h"

enum GRAPHIC_RENDERER_TECHNIQUE_DEFERRED_SHADING_GBUFFER_TYPES {
    GRAPHIC_RENDERER_TECHNIQUE_DEFERRED_SHADING_GBUFFER_WorldPos = 0x00000001,
    GRAPHIC_RENDERER_TECHNIQUE_DEFERRED_SHADING_GBUFFER_Diffuse = 0x00000010,
    GRAPHIC_RENDERER_TECHNIQUE_DEFERRED_SHADING_GBUFFER_Normal = 0x00000100,
    GRAPHIC_RENDERER_TECHNIQUE_DEFERRED_SHADING_GBUFFER_Specular = 0x00001000,
    GRAPHIC_RENDERER_TECHNIQUE_DEFERRED_SHADING_GBUFFER_AmbientOcclusion = 0x00010000,
    GRAPHIC_RENDERER_TECHNIQUE_DEFERRED_SHADING_GBUFFER_None = 0x00000000,
    GRAPHIC_RENDERER_TECHNIQUE_DEFERRED_SHADING_GBUFFER_ALL = GRAPHIC_RENDERER_TECHNIQUE_DEFERRED_SHADING_GBUFFER_Diffuse | GRAPHIC_RENDERER_TECHNIQUE_DEFERRED_SHADING_GBUFFER_Normal | GRAPHIC_RENDERER_TECHNIQUE_DEFERRED_SHADING_GBUFFER_Specular | GRAPHIC_RENDERER_TECHNIQUE_DEFERRED_SHADING_GBUFFER_AmbientOcclusion
};

XS_CLASS_BEGIN_WITH_ANCESTOR( GRAPHIC_RENDERER_TECHNIQUE_DEFERRED_SHADING, GRAPHIC_RENDERER_TECHNIQUE )

    GRAPHIC_RENDERER_TECHNIQUE_DEFERRED_SHADING();
    virtual ~GRAPHIC_RENDERER_TECHNIQUE_DEFERRED_SHADING();

public:

    void ConfigureGBufferBeforeInit( GRAPHIC_RENDERER & renderer, int types );

    virtual void Initialize( GRAPHIC_RENDERER & renderer );
    virtual void ApplyFirstPass( GRAPHIC_RENDERER & renderer );
    virtual void ApplySecondPass( GRAPHIC_RENDERER & renderer );

    void ApplyStencilPassForPoint( GRAPHIC_RENDERER & renderer, GRAPHIC_OBJECT_RENDER_OPTIONS & option,  GRAPHIC_SHADER_LIGHT * light );
    void ApplyStencilPassForSpot( GRAPHIC_RENDERER & renderer, GRAPHIC_OBJECT_RENDER_OPTIONS & option, GRAPHIC_SHADER_LIGHT * light );
    void ApplyPointLightPass( GRAPHIC_RENDERER & renderer );
    void ApplySpotLightPass( GRAPHIC_RENDERER & renderer );

    float CalculatePointLightSphereAndExtent(const GRAPHIC_SHADER_LIGHT &) const;
    float CalculateSpotLightSphereAndExtent(const GRAPHIC_SHADER_LIGHT &) const;
    void SetPreviousCamera( GRAPHIC_CAMERA::PTR camera );

    GRAPHIC_MATERIAL
        Material;
    GRAPHIC_CAMERA::PTR
        PreviousCamera;
    GRAPHIC_OBJECT::PTR
        ConeObject;
    GRAPHIC_OBJECT_SHAPE_PLAN::PTR
        PlanObject;
    GRAPHIC_OBJECT_SHAPE_SPHERE::PTR
        SphereObject;
    GRAPHIC_TEXTURE_BLOCK
        TextureBlock1,
        TextureBlock2,
        TextureBlock3,
        TextureBlock4,
        TextureBlock5,
        TextureBlock6;
    GRAPHIC_SHADER_EFFECT_DEFERRED::PTR
        AmbientDirectionalDefferedEffect,
        SpotDeferredEffect,
        PointDefferedEffect;
    GRAPHIC_SHADER_EFFECT::PTR
        NullTechniqueEffect;
    int
        GBUFFER_TYPES;

XS_CLASS_END

#endif /* GRAPHIC_RENDERER_TECHNIQUE_DEFERRED_SHADING_hpp */
