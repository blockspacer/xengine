#version 410 core

layout(triangles, equal_spacing, ccw) in;

uniform sampler2D c_texture;
uniform sampler2D n_texture;
uniform sampler2D t_texture;
uniform sampler2D d_texture;
uniform sampler2D d_texture1;
uniform sampler2D d_texture2;
uniform mat4 ViewMatrix;
uniform mat4 ProjectionMatrix;
//uniform float gDispFactor;

in vec4 WorldPos_ES_in[];
in vec2 TexCoord_ES_in[];
in vec4 Normal_ES_in[];
in vec4 ShadowCoord_ES_in[][3];
in mat3 TBNMatrix_p_ES_in[];

out vec3 WorldPos0;
out vec2 texCoord;
out vec4 o_normal;
out float ClipSpacePosZ;
out vec4 ShadowCoord[3];
out mat3 TBNMatrix_p;

vec2 interpolate2D(vec2 v0, vec2 v1, vec2 v2)
{
   	return vec2(gl_TessCoord.x) * v0 + vec2(gl_TessCoord.y) * v1 + vec2(gl_TessCoord.z) * v2;
}

vec3 interpolate3D(vec3 v0, vec3 v1, vec3 v2)
{
   	return vec3(gl_TessCoord.x) * v0 + vec3(gl_TessCoord.y) * v1 + vec3(gl_TessCoord.z) * v2;
}

void main()
{
  // Interpolate the attributes of the output vertex using the barycentric coordinates
  o_normal = vec4( interpolate3D(Normal_ES_in[0].xyz, Normal_ES_in[1].xyz, Normal_ES_in[2].xyz), 0.0 );
  o_normal = normalize(o_normal);
  WorldPos0 = interpolate3D(WorldPos_ES_in[0].xyz, WorldPos_ES_in[1].xyz, WorldPos_ES_in[2].xyz);
  texCoord = interpolate2D(TexCoord_ES_in[0], TexCoord_ES_in[1], TexCoord_ES_in[2]);
  ShadowCoord[0] = vec4( interpolate3D( ShadowCoord_ES_in[0][0].xyz, ShadowCoord_ES_in[1][0].xyz, ShadowCoord_ES_in[2][0].xyz ), 0.0);
  ShadowCoord[1] = vec4( interpolate3D( ShadowCoord_ES_in[0][1].xyz, ShadowCoord_ES_in[1][1].xyz, ShadowCoord_ES_in[2][1].xyz ), 0.0);
  ShadowCoord[2] = vec4( interpolate3D( ShadowCoord_ES_in[0][2].xyz, ShadowCoord_ES_in[1][2].xyz, ShadowCoord_ES_in[2][2].xyz ), 0.0);

  TBNMatrix_p = TBNMatrix_p_ES_in[0];


  //Displace the vertex along the normal
  WorldPos0 += o_normal.xyz * texture(t_texture, texCoord).x;
  gl_Position = ProjectionMatrix * ViewMatrix * vec4(WorldPos0, 1.0);
  ClipSpacePosZ = gl_Position.z;
}
